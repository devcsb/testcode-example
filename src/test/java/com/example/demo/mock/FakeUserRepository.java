package com.example.demo.mock;

import com.example.demo.common.domain.exception.ResourceNotFoundException;
import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeUserRepository implements UserRepository {

/*     병렬처리시 동기화 문제 대비하여 AtomicLong과 synchronizedList를 사용할 수 있다.
     하지만, 소형테스트는 단일 쓰레드에서 돌아가기 때문에, 동기화를 걱정할 필요가 없으므로, Long, ArrayList를 쓰면 된다.*/
//    private final AtomicLong autoGeneratedId = new AtomicLong(0);
//    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    private Long autoGeneratedId = 0L;
    private final List<User> data = new ArrayList<>();

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(() -> new ResourceNotFoundException("Users", id));
    }

    @Override
    public Optional<User> findById(long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream().filter(item -> item.getId().equals(id) && item.getStatus() == userStatus).findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream().filter(item -> item.getEmail().equals(email) && item.getStatus() == userStatus).findAny();
    }

    @Override
    public User save(User user) {
        // jpa의 동작원리를 유사하게 구현. (id값이 null 또는 0이면 insert, 그게 아니면 update)
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(++autoGeneratedId)
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }
}
